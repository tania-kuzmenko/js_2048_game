{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAI,EAAQ,EAAE,CACV,EAAQ,EACR,EAAU,CAAA,EACR,EAAgB,SAAS,aAAa,CAAC,kBACvC,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAQ,SAAS,cAAc,CAAC,SAetC,SAAS,IAGP,IAAK,IAe6B,EAC5B,E,EAlBA,EAAa,EAAE,CAEZ,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAChC,IAAK,IAAI,EAAI,EAAG,EAAI,CAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACf,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EACb,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,IACE,E,A,S,C,E,G,M,O,C,G,O,C,E,EAAA,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,G,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,EAAA,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,EAAA,G,E,EAAA,I,A,W,M,A,U,6I,IADpD,EACL,CAAA,CAAA,EAAA,CADc,EACd,CADF,CAAA,EAAA,AAGA,CAAA,CAAK,CAAC,EAAQ,CAAC,EAAQ,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EAIlB,EAHF,CAAK,CAAC,EAAQ,CAAC,EAAQ,CAMvD,CAFM,EAAO,SAAS,aAAa,CAAC,QAE/B,SAAS,CAAC,GAAG,CAChB,aACA,MAAS,CAAA,AARG,EAQG,CAAA,EACf,SAAY,CAAA,AATS,EASA,CAAA,EACrB,eAAiB,GAEnB,EAAK,SAAS,CAAG,EACjB,EAAc,WAAW,CAAC,GAC1B,EAAK,SAAS,CAAC,GAAG,CAAC,UAEnB,EAAK,gBAAgB,CAAC,eAAgB,WACpC,EAAK,SAAS,CAAC,MAAM,CAAC,SACxB,EAjBF,CAyCA,SAAS,EAAoB,CAAS,EACpC,IAAI,EAEJ,OAAQ,EAAU,GAAG,EACnB,IAAK,UACH,EAAe,EAAU,EAAG,GAC5B,KACF,KAAK,YACH,EAAe,EAAU,GAAI,GAC7B,KACF,KAAK,YACH,EAAe,EAAU,EAAG,IAC5B,KACF,KAAK,aACH,EAAe,EAAU,EAAG,EAEhC,CAEA,GAAI,EAAc,CAChB,IAEA,IAAM,EAAW,GAEb,CAAA,EAAS,QAAQ,EACnB,EAAU,EAAS,OAAO,CAE9B,CACF,CAEA,SAAS,EAAU,CAAU,CAAE,CAAU,EACvC,IAAI,EAAe,CAAA,EACf,EAAiB,CAAA,EAErB,GAAI,AAAe,IAAf,EAIF,IAAK,IAHC,EAAS,AAAe,IAAf,EAAmB,EAAI,EAChC,EAAQ,AAAe,IAAf,EAAmB,GAAK,EAE7B,EAAI,EAAG,EAAI,EAAG,IAIrB,IAHA,IAAI,EAAI,EAGD,GAAM,GAAK,AAAU,IAAV,GAAiB,GAAK,GAAK,AAAU,KAAV,GAAe,CAC1D,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAQ,CACrB,GAAK,EACL,QACF,CAEA,IAAM,EAAc,EAAqB,EAAG,EAAG,EAAG,GAC5C,EAAY,OAAU,CAAA,EAAI,CAAA,EAAK,UAAa,CAAA,EAAI,CAAA,EAChD,EAAO,SAAS,aAAa,CAAC,GAEpC,GAAI,CAAC,EAAY,KAAK,EAAK,EAAY,KAAK,EAAI,EAAiB,CAC/D,EAAiB,CAAA,EACjB,EAAY,YAAY,EAAI,EAAY,KAAK,CAAG,EAAQ,EACxD,CAAK,CAAC,EAAE,CAAC,EAAY,YAAY,CAAC,CAAG,CAAK,CAAC,EAAE,CAAC,EAAE,CAE5C,EAAY,YAAY,GAAK,IAC/B,EAAe,CAAA,EACf,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,GAEhB,EAAe,EAAG,EAAY,YAAY,CAAE,EAAM,CAAA,GAClD,GAAK,EACL,QACF,CACA,EAAiB,CAAA,EACjB,CAAK,CAAC,EAAE,CAAC,EAAY,YAAY,CAAC,CAAG,AAAc,EAAd,CAAK,CAAC,EAAE,CAAC,EAAE,CAChD,GAAS,CAAK,CAAC,EAAE,CAAC,EAAY,YAAY,CAAC,CAC3C,EAAa,SAAS,CAAG,EAErB,CAAA,AAAU,IAAV,GAAe,AAAU,IAAV,CAAU,IAC3B,EAAM,SAAS,CAAC,MAAM,CAAC,SACvB,EAAM,SAAS,CAAC,GAAG,CAAC,WACpB,EAAM,SAAS,CAAG,WAEpB,EAAe,CAAA,EACf,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,EACd,EAAe,EAAG,EAAY,YAAY,CAAE,EAAM,EAAY,KAAK,EACnE,GAAK,CACP,MAEG,GAAI,AAAe,IAAf,EAIT,IAAK,IAHC,EAAS,AAAe,IAAf,EAAmB,EAAI,EAChC,EAAQ,AAAe,IAAf,EAAmB,GAAK,EAE7B,EAAI,EAAG,EAAI,EAAG,IAGrB,IAFA,IAAI,EAAI,EAEA,GAAK,GAAK,AAAU,IAAV,GAAiB,GAAK,GAAK,AAAU,KAAV,GAAe,CAC1D,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAQ,CACrB,GAAK,EACL,QACF,CAEA,IAAM,EAAc,EAAqB,EAAG,EAAG,EAAY,GACrD,EAAY,OAAU,CAAA,EAAI,CAAA,EAAK,UAAa,CAAA,EAAI,CAAA,EAChD,EAAO,SAAS,aAAa,CAAC,GAEpC,GAAI,CAAC,EAAY,KAAK,EAAK,EAAY,KAAK,EAAI,EAAiB,CAC/D,EAAiB,CAAA,EACjB,EAAY,YAAY,EAAI,EAAY,KAAK,CAAG,EAAQ,EACxD,CAAK,CAAC,EAAY,YAAY,CAAC,CAAC,EAAE,CAAG,CAAK,CAAC,EAAE,CAAC,EAAE,CAE5C,EAAY,YAAY,GAAK,IAC/B,EAAe,CAAA,EACf,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,GAEhB,EAAe,EAAY,YAAY,CAAE,EAAG,EAAM,CAAA,GAClD,GAAK,EACL,QACF,CACA,EAAiB,CAAA,EACjB,CAAK,CAAC,EAAY,YAAY,CAAC,CAAC,EAAE,CAAG,AAAc,EAAd,CAAK,CAAC,EAAE,CAAC,EAAE,CAChD,GAAS,CAAK,CAAC,EAAY,YAAY,CAAC,CAAC,EAAE,CAC3C,EAAa,SAAS,CAAG,EACzB,EAAe,CAAA,EACf,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,EACd,EAAe,EAAY,YAAY,CAAE,EAAG,EAAM,EAAY,KAAK,EACnE,GAAK,CACP,CAIJ,OAAO,CACT,CAEA,SAAS,EAAqB,CAAC,CAAE,CAAC,CAAE,CAAU,CAAE,CAAU,EAKxD,IAJA,IAAI,EAAe,EACf,EAAe,EACf,EAAQ,CAAA,EAGT,EAAe,GAAK,AAAe,IAAf,GACpB,EAAe,GAAK,AAAe,KAAf,GACpB,EAAe,GAAK,AAAe,IAAf,GACpB,EAAe,GAAK,AAAe,KAAf,GACrB,CACA,IAAM,EAAQ,EAAe,EACvB,EAAQ,EAAe,EACvB,EAAW,CAAK,CAAC,EAAM,CAAC,EAAM,CAC9B,EAAc,CAAK,CAAC,EAAE,CAAC,EAAE,CAc/B,GAZI,CAAA,AAAa,IAAb,GAAkB,IAAa,CAAA,IACjC,EAAe,EACf,EAAe,EACf,EAAQ,IAAa,GAGnB,CAAA,AAAa,IAAb,GAAkB,IAAa,CAAA,IACjC,EAAe,EACf,EAAe,EACf,EAAQ,IAAa,GAGN,IAAb,GAAkB,IAAa,GAI/B,EAHF,KAMJ,CAEA,MAAO,CACL,MAAO,EACP,aAAc,EACd,aAAc,CAChB,CACF,CAIA,SAAS,EAAe,CAAG,CAAE,CAAM,CAAE,CAAI,CAAE,CAAK,EAU9C,GAPA,AAFgB,MAAM,IAAI,CAAC,EAAK,SAAS,EAEjC,OAAO,CAAC,SAAC,CAAjB,EACM,CAAA,EAAU,UAAU,CAAC,QAAU,EAAU,UAAU,CAAC,SAAA,GACtD,EAAK,SAAS,CAAC,MAAM,CAAC,EAE1B,GACA,EAAK,SAAS,CAAC,GAAG,CAAC,MAAS,CAAA,EAAM,CAAA,EAAI,SAAY,CAAA,EAAS,CAAA,GAEvD,EAAO,CAKT,IAJA,IAAI,EAAW,EAAc,gBAAgB,CAC3C,OAAU,CAAA,EAAM,CAAA,EAAK,UAAa,CAAA,EAAS,CAAA,GAGtC,EAAS,MAAM,CAAG,GACvB,EAAc,WAAW,CAAC,CAAQ,CAAC,EAAE,EAErC,EAAW,EAAc,gBAAgB,CACvC,OAAU,CAAA,EAAM,CAAA,EAAK,UAAa,CAAA,EAAS,CAAA,EAI/C,CAAA,CAAQ,CAAC,EAAE,CAAC,SAAS,CACnB,iBAEC,CAAA,EAAM,CAAA,EACP,UACC,CAAA,EAAS,CAAA,EAJV,gBAOA,CAAK,CAAC,EAAI,CAAC,EAAO,CACpB,CAAQ,CAAC,EAAE,CAAC,SAAS,CAAG,CAAK,CAAC,EAAI,CAAC,EAAO,CAC1C,CAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAE1B,CAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,eAAgB,WAC3C,EAAK,SAAS,CAAC,MAAM,CAAC,SACxB,EACF,CACF,CAEA,SAAS,IAGP,IAAK,IAFD,EAAc,CAAA,EAET,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAChC,IAAK,IAAI,EAAI,EAAG,EAAI,CAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IAAK,CAKxC,GAJoB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EACb,CAAA,EAAc,CAAA,CADhB,EAII,AAAgB,OAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EAAa,CAAC,EAC3B,MAAO,CACL,SAAU,CAAA,EACV,QAAS,UACX,CAGQ,CAAA,IAAN,GAAW,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAC5C,CAAA,EAAc,CAAA,CADhB,EAIU,IAAN,GAAW,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,CAAC,EAAE,EAC5C,CAAA,EAAc,CAAA,CADhB,CAGF,QAGF,AAAI,EACK,CACL,SAAU,CAAA,EACV,QAAS,EACX,EAGK,CACL,SAAU,CAAA,EACV,QAAS,YACX,CACF,CAEA,SAAS,EAAU,CAAO,EACR,eAAZ,GACF,SAAS,aAAa,CAAC,iBAAiB,SAAS,CAAC,MAAM,CAAC,UAG3C,aAAZ,IACF,EAAU,CAAA,EAEV,SAAS,aAAa,CAAC,gBAAgB,SAAS,CAAC,MAAM,CAAC,UAExD,SAAS,mBAAmB,CAAC,UAAW,GAE5C,CA7UA,EAAM,gBAAgB,CAAC,QAkDvB,WACE,EAAM,SAAS,CAAC,MAAM,CAAC,WACvB,EAAM,SAAS,CAAC,GAAG,CAAC,SACpB,EAAM,SAAS,CAAG,QAClB,SAAS,aAAa,CAAC,kBAAkB,SAAS,CAAC,GAAG,CAAC,UACvD,SAAS,aAAa,CAAC,iBAAiB,SAAS,CAAC,GAAG,CAAC,UACtD,SAAS,aAAa,CAAC,gBAAgB,SAAS,CAAC,GAAG,CAAC,UACrD,EAAc,SAAS,CAAG,GAC1B,EAAa,SAAS,CAAG,EACzB,EAAQ,EAAE,CACV,EAAQ,EACR,EAAU,CAAA,EACV,SAAS,gBAAgB,CAAC,UAAW,GACrC,AA7DF,WACE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAG1B,IAAK,IAFC,EAAM,EAAE,CAEL,EAAI,EAAG,EAAI,EAAG,IACrB,EAAI,IAAI,CAAC,GAEX,EAAM,IAAI,CAAC,EACb,CACF,IAqDE,IACA,GACF,GA6QA,IAAI,EAAc,EACd,EAAc,EAElB,SAAS,gBAAgB,CAAC,aAG1B,SAAsB,CAAU,EAC9B,EAAc,EAAW,OAAO,CAAC,EAAE,CAAC,OAAO,CAC3C,EAAc,EAAW,OAAO,CAAC,EAAE,CAAC,OAAO,AAC7C,GALA,SAAS,gBAAgB,CAAC,WAO1B,SAAoB,CAAU,EAE5B,IADI,EACE,EAAY,EAAW,cAAc,CAAC,EAAE,CAAC,OAAO,CAChD,EAAY,EAAW,cAAc,CAAC,EAAE,CAAC,OAAO,CAChD,EAAS,EAAY,EACrB,EAAS,EAAY,EAwB3B,GApBI,KAAK,GAAG,CAAC,GAAU,KAAK,GAAG,CAAC,GAE1B,KAAK,GAAG,CAAC,GAJQ,KAMjB,EADE,EAAS,EACI,EAAU,EAAG,GAEb,EAAU,EAAG,KAK5B,KAAK,GAAG,CAAC,GAbQ,KAejB,EADE,EAAS,EACI,EAAU,GAAI,GAEd,EAAU,EAAG,IAK9B,EAAc,CAChB,IAEA,IAAM,EAAW,GAEb,CAAA,EAAS,QAAQ,EACnB,EAAU,EAAS,OAAO,CAE9B,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar board = [];\nvar score = 0;\nvar wonGame = false;\nvar tileContainer = document.querySelector(\".tileContainer\");\nvar scoreElement = document.getElementById(\"scoreElement\");\nvar start = document.getElementById(\"start\");\nstart.addEventListener(\"click\", startNewGame);\nfunction createBoard() {\n    for(var i = 0; i < 4; i++){\n        var row = [];\n        for(var j = 0; j < 4; j++)row.push(0);\n        board.push(row);\n    }\n}\nfunction addRandomTile() {\n    var emptyTiles = [];\n    for(var i = 0; i < board.length; i++){\n        for(var j = 0; j < board[i].length; j++)if (board[i][j] === 0) emptyTiles.push([\n            i,\n            j\n        ]);\n    }\n    var _emptyTiles_Math_floor = _sliced_to_array(emptyTiles[Math.floor(Math.random() * emptyTiles.length)], 2), randomI = _emptyTiles_Math_floor[0], randomJ = _emptyTiles_Math_floor[1];\n    board[randomI][randomJ] = Math.random() < 0.9 ? 2 : 4;\n    addTileToPage(randomI, randomJ, board[randomI][randomJ]);\n}\nfunction addTileToPage(row, column, value) {\n    var tile = document.createElement(\"div\");\n    tile.classList.add(\"field-cell\", \"row\" + (row + 1), \"column\" + (column + 1), \"field-cell--\" + value);\n    tile.innerHTML = value;\n    tileContainer.appendChild(tile);\n    tile.classList.add(\"merged\");\n    tile.addEventListener(\"animationend\", function() {\n        tile.classList.remove(\"merged\");\n    });\n}\n/* eslint-disable no-unused-vars */ function startNewGame() {\n    start.classList.remove(\"restart\");\n    start.classList.add(\"start\");\n    start.innerHTML = \"Start\";\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    tileContainer.innerHTML = \"\";\n    scoreElement.innerHTML = 0;\n    board = [];\n    score = 0;\n    wonGame = false;\n    document.addEventListener(\"keydown\", onDirectionKeyPress);\n    createBoard();\n    addRandomTile();\n    addRandomTile();\n}\n/* eslint-enable no-unused-vars */ function onDirectionKeyPress(gameEvent) {\n    var movePossible;\n    switch(gameEvent.key){\n        case \"ArrowUp\":\n            movePossible = moveTiles(1, 0);\n            break;\n        case \"ArrowDown\":\n            movePossible = moveTiles(-1, 0);\n            break;\n        case \"ArrowLeft\":\n            movePossible = moveTiles(0, -1);\n            break;\n        case \"ArrowRight\":\n            movePossible = moveTiles(0, 1);\n            break;\n    }\n    if (movePossible) {\n        addRandomTile();\n        var gameOver = isGameOver();\n        if (gameOver.gameOver) showAlert(gameOver.message);\n    }\n}\nfunction moveTiles(directionY, directionX) {\n    var movePossible = false;\n    var mergedRecently = false;\n    if (directionX !== 0) {\n        var startX = directionX === 1 ? 3 : 0;\n        var stepX = directionX === 1 ? -1 : 1;\n        for(var i = 0; i < 4; i++){\n            var j = startX;\n            /* eslint-disable no-unmodified-loop-condition */ while(j <= 3 && stepX === 1 || j >= 0 && stepX === -1){\n                if (board[i][j] === 0) {\n                    j += stepX;\n                    continue;\n                }\n                var destination = getDestinationSquare(i, j, 0, directionX);\n                var tileClass = \".row\" + (i + 1) + \".column\" + (j + 1);\n                var tile = document.querySelector(tileClass);\n                if (!destination.merge || destination.merge && mergedRecently) {\n                    mergedRecently = false;\n                    destination.destinationX += destination.merge ? stepX : 0;\n                    board[i][destination.destinationX] = board[i][j];\n                    if (destination.destinationX !== j) {\n                        movePossible = true;\n                        board[i][j] = 0;\n                    }\n                    moveTileOnPage(i, destination.destinationX, tile, false);\n                    j += stepX;\n                    continue;\n                }\n                mergedRecently = true;\n                board[i][destination.destinationX] = board[i][j] * 2;\n                score += board[i][destination.destinationX];\n                scoreElement.innerHTML = score;\n                if (score === 4 || score === 8) {\n                    start.classList.remove(\"start\");\n                    start.classList.add(\"restart\");\n                    start.innerHTML = \"Restart\";\n                }\n                movePossible = true;\n                board[i][j] = 0;\n                moveTileOnPage(i, destination.destinationX, tile, destination.merge);\n                j += stepX;\n            }\n        }\n    } else if (directionY !== 0) {\n        var startY = directionY === 1 ? 3 : 0;\n        var stepY = directionY === 1 ? -1 : 1;\n        for(var j1 = 0; j1 < 4; j1++){\n            var i1 = startY;\n            while(i1 <= 3 && stepY === 1 || i1 >= 0 && stepY === -1){\n                if (board[i1][j1] === 0) {\n                    i1 += stepY;\n                    continue;\n                }\n                var destination1 = getDestinationSquare(i1, j1, directionY, 0);\n                var tileClass1 = \".row\" + (i1 + 1) + \".column\" + (j1 + 1);\n                var tile1 = document.querySelector(tileClass1);\n                if (!destination1.merge || destination1.merge && mergedRecently) {\n                    mergedRecently = false;\n                    destination1.destinationY += destination1.merge ? stepY : 0;\n                    board[destination1.destinationY][j1] = board[i1][j1];\n                    if (destination1.destinationY !== i1) {\n                        movePossible = true;\n                        board[i1][j1] = 0;\n                    }\n                    moveTileOnPage(destination1.destinationY, j1, tile1, false);\n                    i1 += stepY;\n                    continue;\n                }\n                mergedRecently = true;\n                board[destination1.destinationY][j1] = board[i1][j1] * 2;\n                score += board[destination1.destinationY][j1];\n                scoreElement.innerHTML = score;\n                movePossible = true;\n                board[i1][j1] = 0;\n                moveTileOnPage(destination1.destinationY, j1, tile1, destination1.merge);\n                i1 += stepY;\n            }\n        }\n    }\n    return movePossible;\n}\nfunction getDestinationSquare(i, j, directionY, directionX) {\n    var destinationY = i;\n    var destinationX = j;\n    var merge = false;\n    while(destinationY < 3 && directionY === 1 || destinationY > 0 && directionY === -1 || destinationX < 3 && directionX === 1 || destinationX > 0 && directionX === -1){\n        var nextY = destinationY + directionY;\n        var nextX = destinationX + directionX;\n        var nextCell = board[nextY][nextX];\n        var currentCell = board[i][j];\n        if (nextCell === 0 || nextCell === currentCell) {\n            destinationY = nextY;\n            destinationX = nextX;\n            merge = nextCell === currentCell;\n        }\n        if (nextCell === 0 || nextCell === currentCell) {\n            destinationY = nextY;\n            destinationX = nextX;\n            merge = nextCell === currentCell;\n        }\n        if (nextCell !== 0 && nextCell !== currentCell) break;\n        if (merge) break;\n    }\n    return {\n        merge: merge,\n        destinationY: destinationY,\n        destinationX: destinationX\n    };\n}\n/* eslint-enable no-unused-vars */ function moveTileOnPage(row, column, tile, merge) {\n    var classes = Array.from(tile.classList);\n    classes.forEach(function(className) {\n        if (className.startsWith(\"row\") || className.startsWith(\"column\")) tile.classList.remove(className);\n    });\n    tile.classList.add(\"row\" + (row + 1), \"column\" + (column + 1));\n    if (merge) {\n        var elements = tileContainer.querySelectorAll(\".row\" + (row + 1) + \".column\" + (column + 1));\n        while(elements.length > 1){\n            tileContainer.removeChild(elements[0]);\n            elements = tileContainer.querySelectorAll(\".row\" + (row + 1) + \".column\" + (column + 1));\n        }\n        elements[0].className = \"field-cell row\" + (row + 1) + \" column\" + (column + 1) + \" \" + \"field-cell--\" + board[row][column];\n        elements[0].innerHTML = board[row][column];\n        elements[0].classList.add(\"merged\");\n        elements[0].addEventListener(\"animationend\", function() {\n            tile.classList.remove(\"merged\");\n        });\n    }\n}\nfunction isGameOver() {\n    var emptySquare = false;\n    for(var i = 0; i < board.length; i++)for(var j = 0; j < board[i].length; j++){\n        if (board[i][j] === 0) emptySquare = true;\n        if (board[i][j] === 2048 && !wonGame) return {\n            gameOver: true,\n            message: \"You won!\"\n        };\n        if (j !== 3 && board[i][j] === board[i][j + 1]) emptySquare = true;\n        if (i !== 3 && board[i][j] === board[i + 1][j]) emptySquare = true;\n    }\n    if (emptySquare) return {\n        gameOver: false,\n        message: \"\"\n    };\n    return {\n        gameOver: true,\n        message: \"Game over!\"\n    };\n}\nfunction showAlert(message) {\n    if (message === \"Game over!\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    if (message === \"You won!\") {\n        wonGame = true;\n        document.querySelector(\".message-win\").classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", onDirectionKeyPress);\n    }\n}\nvar touchStartX = 0;\nvar touchStartY = 0;\ndocument.addEventListener(\"touchstart\", onTouchStart);\ndocument.addEventListener(\"touchend\", onTouchEnd);\nfunction onTouchStart(touchEvent) {\n    touchStartX = touchEvent.touches[0].clientX;\n    touchStartY = touchEvent.touches[0].clientY;\n}\nfunction onTouchEnd(touchEvent) {\n    var movePossible;\n    var touchEndX = touchEvent.changedTouches[0].clientX;\n    var touchEndY = touchEvent.changedTouches[0].clientY;\n    var deltaX = touchEndX - touchStartX;\n    var deltaY = touchEndY - touchStartY;\n    var swipeThreshold = 50;\n    if (Math.abs(deltaX) > Math.abs(deltaY)) // Horizontal swipe\n    {\n        if (Math.abs(deltaX) > swipeThreshold) {\n            if (deltaX > 0) movePossible = moveTiles(0, 1);\n            else movePossible = moveTiles(0, -1);\n        }\n    } else // Vertical swipe\n    if (Math.abs(deltaY) > swipeThreshold) {\n        if (deltaY > 0) movePossible = moveTiles(-1, 0);\n        else movePossible = moveTiles(1, 0);\n    }\n    if (movePossible) {\n        addRandomTile();\n        var gameOver = isGameOver();\n        if (gameOver.gameOver) showAlert(gameOver.message);\n    }\n}\n\n//# sourceMappingURL=index.b806f89c.js.map\n","\"use strict\";\n\nlet board = [];\nlet score = 0;\nlet wonGame = false;\nconst tileContainer = document.querySelector(\".tileContainer\");\nconst scoreElement = document.getElementById(\"scoreElement\");\nconst start = document.getElementById(\"start\");\n\nstart.addEventListener(\"click\", startNewGame);\n\nfunction createBoard() {\n  for (let i = 0; i < 4; i++) {\n    const row = [];\n\n    for (let j = 0; j < 4; j++) {\n      row.push(0);\n    }\n    board.push(row);\n  }\n}\n\nfunction addRandomTile() {\n  const emptyTiles = [];\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === 0) {\n        emptyTiles.push([i, j]);\n      }\n    }\n  }\n\n  const [randomI, randomJ] =\n    emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n  board[randomI][randomJ] = Math.random() < 0.9 ? 2 : 4;\n  addTileToPage(randomI, randomJ, board[randomI][randomJ]);\n}\n\nfunction addTileToPage(row, column, value) {\n  const tile = document.createElement(\"div\");\n\n  tile.classList.add(\n    \"field-cell\",\n    \"row\" + (row + 1),\n    \"column\" + (column + 1),\n    \"field-cell--\" + value,\n  );\n  tile.innerHTML = value;\n  tileContainer.appendChild(tile);\n  tile.classList.add(\"merged\");\n\n  tile.addEventListener(\"animationend\", function () {\n    tile.classList.remove(\"merged\");\n  });\n}\n\n/* eslint-disable no-unused-vars */\nfunction startNewGame() {\n  start.classList.remove(\"restart\");\n  start.classList.add(\"start\");\n  start.innerHTML = \"Start\";\n  document.querySelector(\".message-start\").classList.add(\"hidden\");\n  document.querySelector(\".message-lose\").classList.add(\"hidden\");\n  document.querySelector(\".message-win\").classList.add(\"hidden\");\n  tileContainer.innerHTML = \"\";\n  scoreElement.innerHTML = 0;\n  board = [];\n  score = 0;\n  wonGame = false;\n  document.addEventListener(\"keydown\", onDirectionKeyPress);\n  createBoard();\n  addRandomTile();\n  addRandomTile();\n}\n\n/* eslint-enable no-unused-vars */\n\nfunction onDirectionKeyPress(gameEvent) {\n  let movePossible;\n\n  switch (gameEvent.key) {\n    case \"ArrowUp\":\n      movePossible = moveTiles(1, 0);\n      break;\n    case \"ArrowDown\":\n      movePossible = moveTiles(-1, 0);\n      break;\n    case \"ArrowLeft\":\n      movePossible = moveTiles(0, -1);\n      break;\n    case \"ArrowRight\":\n      movePossible = moveTiles(0, 1);\n      break;\n  }\n\n  if (movePossible) {\n    addRandomTile();\n\n    const gameOver = isGameOver();\n\n    if (gameOver.gameOver) {\n      showAlert(gameOver.message);\n    }\n  }\n}\n\nfunction moveTiles(directionY, directionX) {\n  let movePossible = false;\n  let mergedRecently = false;\n\n  if (directionX !== 0) {\n    const startX = directionX === 1 ? 3 : 0;\n    const stepX = directionX === 1 ? -1 : 1;\n\n    for (let i = 0; i < 4; i++) {\n      let j = startX;\n      /* eslint-disable no-unmodified-loop-condition */\n\n      while ((j <= 3 && stepX === 1) || (j >= 0 && stepX === -1)) {\n        if (board[i][j] === 0) {\n          j += stepX;\n          continue;\n        }\n\n        const destination = getDestinationSquare(i, j, 0, directionX);\n        const tileClass = \".row\" + (i + 1) + \".column\" + (j + 1);\n        const tile = document.querySelector(tileClass);\n\n        if (!destination.merge || (destination.merge && mergedRecently)) {\n          mergedRecently = false;\n          destination.destinationX += destination.merge ? stepX : 0;\n          board[i][destination.destinationX] = board[i][j];\n\n          if (destination.destinationX !== j) {\n            movePossible = true;\n            board[i][j] = 0;\n          }\n          moveTileOnPage(i, destination.destinationX, tile, false);\n          j += stepX;\n          continue;\n        }\n        mergedRecently = true;\n        board[i][destination.destinationX] = board[i][j] * 2;\n        score += board[i][destination.destinationX];\n        scoreElement.innerHTML = score;\n\n        if (score === 4 || score === 8) {\n          start.classList.remove(\"start\");\n          start.classList.add(\"restart\");\n          start.innerHTML = \"Restart\";\n        }\n        movePossible = true;\n        board[i][j] = 0;\n        moveTileOnPage(i, destination.destinationX, tile, destination.merge);\n        j += stepX;\n      }\n    }\n  } else if (directionY !== 0) {\n    const startY = directionY === 1 ? 3 : 0;\n    const stepY = directionY === 1 ? -1 : 1;\n\n    for (let j = 0; j < 4; j++) {\n      let i = startY;\n\n      while ((i <= 3 && stepY === 1) || (i >= 0 && stepY === -1)) {\n        if (board[i][j] === 0) {\n          i += stepY;\n          continue;\n        }\n\n        const destination = getDestinationSquare(i, j, directionY, 0);\n        const tileClass = \".row\" + (i + 1) + \".column\" + (j + 1);\n        const tile = document.querySelector(tileClass);\n\n        if (!destination.merge || (destination.merge && mergedRecently)) {\n          mergedRecently = false;\n          destination.destinationY += destination.merge ? stepY : 0;\n          board[destination.destinationY][j] = board[i][j];\n\n          if (destination.destinationY !== i) {\n            movePossible = true;\n            board[i][j] = 0;\n          }\n          moveTileOnPage(destination.destinationY, j, tile, false);\n          i += stepY;\n          continue;\n        }\n        mergedRecently = true;\n        board[destination.destinationY][j] = board[i][j] * 2;\n        score += board[destination.destinationY][j];\n        scoreElement.innerHTML = score;\n        movePossible = true;\n        board[i][j] = 0;\n        moveTileOnPage(destination.destinationY, j, tile, destination.merge);\n        i += stepY;\n      }\n    }\n  }\n\n  return movePossible;\n}\n\nfunction getDestinationSquare(i, j, directionY, directionX) {\n  let destinationY = i;\n  let destinationX = j;\n  let merge = false;\n\n  while (\n    (destinationY < 3 && directionY === 1) ||\n    (destinationY > 0 && directionY === -1) ||\n    (destinationX < 3 && directionX === 1) ||\n    (destinationX > 0 && directionX === -1)\n  ) {\n    const nextY = destinationY + directionY;\n    const nextX = destinationX + directionX;\n    const nextCell = board[nextY][nextX];\n    const currentCell = board[i][j];\n\n    if (nextCell === 0 || nextCell === currentCell) {\n      destinationY = nextY;\n      destinationX = nextX;\n      merge = nextCell === currentCell;\n    }\n\n    if (nextCell === 0 || nextCell === currentCell) {\n      destinationY = nextY;\n      destinationX = nextX;\n      merge = nextCell === currentCell;\n    }\n\n    if (nextCell !== 0 && nextCell !== currentCell) {\n      break;\n    }\n\n    if (merge) {\n      break;\n    }\n  }\n\n  return {\n    merge: merge,\n    destinationY: destinationY,\n    destinationX: destinationX,\n  };\n}\n\n/* eslint-enable no-unused-vars */\n\nfunction moveTileOnPage(row, column, tile, merge) {\n  const classes = Array.from(tile.classList);\n\n  classes.forEach((className) => {\n    if (className.startsWith(\"row\") || className.startsWith(\"column\")) {\n      tile.classList.remove(className);\n    }\n  });\n  tile.classList.add(\"row\" + (row + 1), \"column\" + (column + 1));\n\n  if (merge) {\n    let elements = tileContainer.querySelectorAll(\n      \".row\" + (row + 1) + \".column\" + (column + 1),\n    );\n\n    while (elements.length > 1) {\n      tileContainer.removeChild(elements[0]);\n\n      elements = tileContainer.querySelectorAll(\n        \".row\" + (row + 1) + \".column\" + (column + 1),\n      );\n    }\n\n    elements[0].className =\n      \"field-cell \" +\n      \"row\" +\n      (row + 1) +\n      \" column\" +\n      (column + 1) +\n      \" \" +\n      \"field-cell--\" +\n      board[row][column];\n    elements[0].innerHTML = board[row][column];\n    elements[0].classList.add(\"merged\");\n\n    elements[0].addEventListener(\"animationend\", function () {\n      tile.classList.remove(\"merged\");\n    });\n  }\n}\n\nfunction isGameOver() {\n  let emptySquare = false;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === 0) {\n        emptySquare = true;\n      }\n\n      if (board[i][j] === 2048 && !wonGame) {\n        return {\n          gameOver: true,\n          message: \"You won!\",\n        };\n      }\n\n      if (j !== 3 && board[i][j] === board[i][j + 1]) {\n        emptySquare = true;\n      }\n\n      if (i !== 3 && board[i][j] === board[i + 1][j]) {\n        emptySquare = true;\n      }\n    }\n  }\n\n  if (emptySquare) {\n    return {\n      gameOver: false,\n      message: \"\",\n    };\n  }\n\n  return {\n    gameOver: true,\n    message: \"Game over!\",\n  };\n}\n\nfunction showAlert(message) {\n  if (message === \"Game over!\") {\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n  }\n\n  if (message === \"You won!\") {\n    wonGame = true;\n\n    document.querySelector(\".message-win\").classList.remove(\"hidden\");\n\n    document.removeEventListener(\"keydown\", onDirectionKeyPress);\n  }\n}\n\nlet touchStartX = 0;\nlet touchStartY = 0;\n\ndocument.addEventListener(\"touchstart\", onTouchStart);\ndocument.addEventListener(\"touchend\", onTouchEnd);\n\nfunction onTouchStart(touchEvent) {\n  touchStartX = touchEvent.touches[0].clientX;\n  touchStartY = touchEvent.touches[0].clientY;\n}\n\nfunction onTouchEnd(touchEvent) {\n  let movePossible;\n  const touchEndX = touchEvent.changedTouches[0].clientX;\n  const touchEndY = touchEvent.changedTouches[0].clientY;\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  const swipeThreshold = 50;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    // Horizontal swipe\n    if (Math.abs(deltaX) > swipeThreshold) {\n      if (deltaX > 0) {\n        movePossible = moveTiles(0, 1);\n      } else {\n        movePossible = moveTiles(0, -1);\n      }\n    }\n  } else {\n    // Vertical swipe\n    if (Math.abs(deltaY) > swipeThreshold) {\n      if (deltaY > 0) {\n        movePossible = moveTiles(-1, 0);\n      } else {\n        movePossible = moveTiles(1, 0);\n      }\n    }\n  }\n\n  if (movePossible) {\n    addRandomTile();\n\n    const gameOver = isGameOver();\n\n    if (gameOver.gameOver) {\n      showAlert(gameOver.message);\n    }\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","board","score","wonGame","tileContainer","document","querySelector","scoreElement","getElementById","start","addRandomTile","value","tile","emptyTiles","j","push","_emptyTiles_Math_floor","_array_with_holes","isArray","Math","floor","random","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","_non_iterable_rest","TypeError","randomI","randomJ","createElement","classList","add","row","column","innerHTML","appendChild","addEventListener","remove","onDirectionKeyPress","gameEvent","movePossible","key","moveTiles","gameOver","isGameOver","showAlert","message","directionY","directionX","mergedRecently","startX","stepX","destination","getDestinationSquare","tileClass","merge","destinationX","moveTileOnPage","startY","stepY","j1","i1","destination1","tileClass1","tile1","destinationY","nextY","nextX","nextCell","currentCell","classes","forEach","className","startsWith","elements","querySelectorAll","removeChild","emptySquare","removeEventListener","createBoard","touchStartX","touchStartY","touchEvent","touches","clientX","clientY","touchEndX","changedTouches","touchEndY","deltaX","deltaY","abs"],"version":3,"file":"index.b806f89c.js.map"}